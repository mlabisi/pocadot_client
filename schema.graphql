schema {
    query: Query
    mutation: Mutation
}

"A registered payment method for the user account"
interface PaymentMethod {
    isDefault: Boolean!
    type: PaymentMethodType!
}

"A musical talent in the database"
interface Talent {
    id: ID! @fake(type: uuid)
    name: String! @fake(type: firstName)
}

"Represents a monetary amount in the smallest unit (aka cents for USD)"
type Amount {
    amount: Int! @fake(type: money, options: {decimalPlaces: 0})
    currency: String! @fake(type: currencyName)
}

"A group in the database"
type Group implements Talent {
    id: ID!
    idols: [Idol!]!
    name: String! @fake(type: productName)
}

type GroupFeed {
    groups: [Group!]!
    page: Int!
}

"An external social media user profile"
type IdentityProvider {
    type: IdentityProviderType!
    userId: ID! @fake(type: uuid)
}

"An idol in the database"
type Idol implements Talent {
    groups: [Group!]!
    id: ID! @fake(type: uuid)
    isSolo: Boolean!
    name: String! @fake(type: firstName, locale: ko)
}

type IdolFeed {
    idols: [Idol!]!
    page: Int!
}

"Represents a listing in the system"
type Listing {
    askingPrice: Int! @fake(type: money, options: {decimalPlaces: 0})
    condition: CardCondition!
    description: String! @fake(type: lorem)
    groups: [Group!] @listLength(min: 0, max: 1)
    id: ID! @fake(type: uuid)
    idols: [Idol!]! @listLength(min: 1, max: 2)
    international: Boolean!
    isFeatured: Boolean!
    listedBy: UserAccount!
    offers: [Offer!]!
    release: String! @fake(type: productName)
    savedBy: [UserAccount!]!
    type: [ListingType!]! @listLength(min: 1, max: 2)
}

type ListingFeed {
    listings: [Listing!]!
    page: Int!
}

"A message sent from one user to another"
type Message {
    author: UserAccount!
    body: String! @fake(type: hackerPhrase)
    recipient: UserAccount!
    timestamp: Int! @fake(type: date, options: {dateFormat: "x"})
}

type Mutation {
    acceptOffer(input: ID!): Offer!
    addListing(input: AddListingInput!): Listing!
    blockProfile(input: ID!): UserProfile!
    changePassword: UserAccount!
    createAccount: UserAccount!
    deleteAccount(input: ID!): UserAccount!
    deleteListings(input: [ID!]!): [Listing!]!
    disputeCharge: Transaction!
    faveListing(input: ID!): Listing!
    faveProfile(input: ID!): UserProfile!
    forgetPassword: UserAccount!
    login: UserAccount!
    logout: UserAccount!
    makeOffer: Offer!
    makePayment: Transaction!
    negotiateOffer: Offer!
    rejectOffer(input: ID!): Offer!
    reportProfile(input: ID!): UserProfile!
    rescindOffer(input: ID!): Offer!
    resetPassword: UserAccount!
    sendMessage(input: SendMessageInput!): Message!
    skipSuggestedListing(input: ID!): Listing!
    unfaveListing(input: ID!): Listing!
    unfaveProfile(input: ID!): UserProfile!
    updateAccount: UserAccount!
    updateOffer: Offer!
}

"Represents an offer made on a listing in the system"
type Offer {
    conversation: [Message!]!
    id: ID! @fake(type: uuid)
    listing: Listing!
    madeBy: UserAccount!
    status: OfferStatus!
    transaction: Transaction
}

type ProfileFeed {
    page: Int!
    users: [UserProfile!]!
}

type Query {
    account(input: ID!): UserAccount!
    featuredListings: [Listing!]!
    groups(input: GroupFilters!): [Group!]!
    groupsFeed(page: Int!): GroupFeed!
    idols(input: IdolFilters!): [Idol!]!
    idolsFeed(page: Int!): IdolFeed!
    listings(input: ListingFilters!): [Listing!]!
    listingsFeed: [Listing!]!
    myAccount: UserAccount!
    myProfile: UserProfile!
    profile(input: ID!): UserProfile!
    talent(input: TalentFilters!): [Talent!]!
    talentFeed: [Talent!]!
    userSuggestions(input: ID!): [Listing!]!
    users(input: UserFilters!): [UserProfile!]!
    usersFeed(page: Int!): ProfileFeed!
}

"An external social media user profile"
type SocialProfile {
    type: SocialProfileType!
    username: String! @fake(type: firstName)
}

"""
A credit/debit card registered through Stripe

Upstream API(s):
sharetribeCU - /v1/api/current_user/show
"""
type StripePaymentMethod implements PaymentMethod {
    cardBrand: String! @examples(values: ["Visa", "Amex", "Mastercard"])
    expirationMonth: String! @fake(type: date, options: {dateFormat: "MMMM"})
    expirationYear: String! @fake(type: date, options: {dateFormat: "YYYY"})
    isDefault: Boolean!
    lastFour: String! @fake(type: number, options: {minNumber: 1000, maxNumber: 9999})
    type: PaymentMethodType!
}

"A listing recommendation"
type Suggestion {
    listing: Listing!
    saved: Boolean!
    skipped: Boolean!
}

"Represents an monetary transaction made for an accepted offer"
type Transaction {
    amountCharged: Amount!
    amountEarned: Amount!
    id: ID! @fake(type: uuid)
}

"""

A user account in the system

Upstream URL(s):
sharetribeCU - GET /v1/api/current_user/show
sharetribeOL - GET /v1/api/own_listings/query
sharetribeTR - GET /v1/api/transactions/query?only=sale
"""
type UserAccount {
    banned: Boolean!
    biases: [Talent!]!
    connectedAccounts: [IdentityProvider!]!
    country: String! @fake(type: country)
    createdAt: String! @fake(type: date, options: {dateFormat: "x"})
    createdListings: [Listing!]!
    deleted: Boolean!
    email: String! @fake(type: email)
    emailVerified: Boolean!
    firstName: String! @fake(type: firstName)
    generalNotifs: Boolean!
    id: ID! @fake(type: uuid)
    language: String! @fake(type: locale)
    lastName: String! @fake(type: lastName)
    paymentMethods: [PaymentMethod!]!
    pendingEmail: String @fake(type: email)
    profile: UserProfile!
    savedListingNotifs: Boolean!
    savedListings: [Listing!]!
    savedProfileListingNotifs: Boolean!
    savedProfiles: [UserProfile!]!
    sentOffers: [Offer!]!
    suggestedListings: [Listing!]!
}

"""
A user profile in the system

Upstream URL(s):
sharetribe - /v1/api/users/show?id={uuid}
"""
type UserProfile {
    description: String! @fake(type: lorem)
    profilePicId: ID! @fake(type: uuid)
    socials: [SocialProfile!]!
    username: String! @fake(type: firstName)
}

"Used to classify photocard conditions"
enum CardCondition {
    DAMAGED
    GOOD
    GREAT
    NEW
    OKAY
}

"The supported external oauth identity provider types"
enum IdentityProviderType {
    APPLE
    GOOGLE
    INSTAGRAM
    TWITTER
}

"Used to classify listings"
enum ListingType {
    WTS
    WTT
}

"The supported statuses an offer can be in"
enum OfferStatus {
    ACCEPTED
    EDITED
    NEGOTIATED
    OPEN
    REJECTED
    RESCINDED
}

"The supported payment method types"
enum PaymentMethodType {
    PAYPAL
    STRIPE_CARD
}

"The supported external social media profile types"
enum SocialProfileType {
    CARRD
    INSTAGRAM
    TWITTER
}

"When adding a listing, all required fields must be specified"
input AddListingInput {
    condition: CardCondition!
    country: String!
    description: String
    groups: [ID!]
    idols: [ID!]!
    international: Boolean!
    listedBy: ID!
    release: String
    startingPrice: Float
    targetGroups: [ID!]
    targetIdols: [ID!]
    targetMinCondition: CardCondition
    targetMinStaringPrice: Float
    type: [ListingType!]!
}

"When adding a user, no optional fields can be added"
input AddUserInput {
    country: String!
    username: String!
}

input GroupFilterFields {
    favedBy: [ID!]
    idols: [ID!]
    inListings: [ID!]
    name: [String!]
    wantedByListings: [ID!]
}

"Available filters for the Group type"
input GroupFilters {
    fields: GroupFilterFields
    ids: [ID!]
}

input IdolFilterFields {
    groups: [ID!]
    inCollections: [ID!]
    inListings: [ID!]
    isSolo: Boolean
    stageName: [String!]
    wantedByListings: [ID!]
}

"Available filters for the Idol type"
input IdolFilters {
    fields: IdolFilterFields
    ids: [ID!]
}

input ListingFieldFilters {
    condition: CardCondition
    country: [String!]
    description: [String!]
    favedBy: [ID!]
    groups: [ID!]
    idols: [ID!]
    international: Boolean
    listedBy: [ID!]
    release: [String!]
    startingPrice: Float
    targetGroups: [ID!]
    targetIdols: [ID!]
    targetMinCondition: CardCondition
    type: ListingType
}

"Available filters for the Listing type"
input ListingFilters {
    fields: ListingFieldFilters
    ids: [ID!]
}

input SendMessageInput {
    authorId: ID!
    conversationId: ID!
    message: String!
}

input StartChatInput {
    fromId: ID!
    listingId: ID!
    toId: ID!
}

"Available filters for the Group type"
input TalentFilters {
    groupFields: GroupFilterFields
    idolFields: IdolFilterFields
    ids: [ID!]
}

input UniqueChatInput {
    id: ID!
}

"When updating a listing, only non-final fields can be updated"
input UpdateListingInput {
    condition: CardCondition
    country: String
    description: String
    favedBy: [ID!]
    groups: [ID!]
    id: ID!
    idols: [ID!]
    international: Boolean
    listedBy: ID
    release: String
    startingPrice: Float
    targetGroups: [ID!]
    targetIdols: [ID!]
    targetMinCondition: CardCondition
    targetMinStaringPrice: Float
    type: [ListingType!]
}

"When updating a user, other existing fields can be added"
input UpdateUserInput {
    collections: [ID!]
    country: String
    faveGroups: [ID!]
    faveIdols: [ID!]
    faveListings: [ID!]
    faveUsers: [ID!]
    id: ID!
    listings: [ID!]
    username: String
}

input UserFilterFields {
    collections: [ID!]
    country: String
    description: String
    faveGroups: [ID!]
    faveIdols: [ID!]
    faveListings: [ID!]
    faveUsers: [ID!]
    listings: [ID!]
    username: String
}

"Available filters for the User type"
input UserFilters {
    fields: UserFilterFields
    ids: [ID!]
}

input UserPreferencesInput {
    faveGroups: [ID!]
    faveIdols: [ID!]
    id: ID!
}
