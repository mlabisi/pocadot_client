# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @fake(locale: fake__Locale, options: fake__options = {dateFormat: "YYYY-MM-DDTHH:mm:ss[Z]", dateFrom: "2010-01-01", dateTo: "2030-01-01", baseColor: {red255: 0, green255: 0, blue255: 0}}, type: fake__Types!) on SCALAR | FIELD_DEFINITION

directive @listLength(max: Int!, min: Int!) on FIELD_DEFINITION

directive @examples(values: [examples__JSON]!) on SCALAR | FIELD_DEFINITION

"A registered payment method for the user account"
interface PaymentMethod {
    isDefault: Boolean!
    type: PaymentMethodType!
}

"A musical talent in the database"
interface Talent {
    id: ID!
    name: String!
}

"Represents a monetary amount in the smallest unit (aka cents for USD)"
type Amount {
    amount: Int!
    currency: String!
}

"A group in the database"
type Group implements Talent {
    id: ID!
    idols: [Idol!]!
    name: String!
}

type GroupFeed {
    groups: [Group!]!
    page: Int!
}

"An external social media user profile"
type IdentityProvider {
    type: IdentityProviderType!
    userId: ID!
}

"An idol in the database"
type Idol implements Talent {
    groups: [Group!]!
    id: ID!
    isSolo: Boolean!
    name: String!
}

type IdolFeed {
    idols: [Idol!]!
    page: Int!
}

"Represents a listing in the system"
type Listing {
    askingPrice: Int!
    condition: CardCondition!
    description: String!
    groups: [Group!]
    id: ID!
    idols: [Idol!]!
    international: Boolean!
    isFeatured: Boolean!
    listedBy: UserAccount!
    offers: [Offer!]!
    release: String!
    savedBy: [UserAccount!]!
    type: [ListingType!]!
}

type ListingFeed {
    listings: [Listing!]!
    page: Int!
}

"A message sent from one user to another"
type Message {
    author: UserAccount!
    body: String!
    recipient: UserAccount!
    timestamp: Int!
}

type Mutation {
    acceptOffer(input: ID!): Offer!
    addListing(input: AddListingInput!): Listing!
    blockProfile(input: ID!): UserProfile!
    changePassword: UserAccount!
    createAccount: UserAccount!
    deleteAccount(input: ID!): UserAccount!
    deleteListings(input: [ID!]!): [Listing!]!
    disputeCharge: Transaction!
    faveListing(input: ID!): Listing!
    faveProfile(input: ID!): UserProfile!
    faveSuggestedListing(input: ID!): Swipe!
    forgetPassword: UserAccount!
    login: UserAccount!
    logout: UserAccount!
    makeOffer: Offer!
    makePayment: Transaction!
    negotiateOffer: Offer!
    rejectOffer(input: ID!): Offer!
    reportProfile(input: ID!): UserProfile!
    rescindOffer(input: ID!): Offer!
    resetPassword: UserAccount!
    sendMessage(input: SendMessageInput!): Message!
    skipSuggestedListing(input: ID!): Swipe!
    unfaveListing(input: ID!): Listing!
    unfaveProfile(input: ID!): UserProfile!
    updateAccount: UserAccount!
    updateOffer: Offer!
}

"Represents an offer made on a listing in the system"
type Offer {
    conversation: [Message!]!
    id: ID!
    listing: Listing!
    madeBy: UserAccount!
    status: OfferStatus!
    transaction: Transaction
}

type ProfileFeed {
    page: Int!
    users: [UserProfile!]!
}

type Query {
    account(input: ID!): UserAccount!
    currentUser: UserAccount!
    featuredListings: [Listing!]!
    groups(input: GroupFilters!): [Group!]!
    groupsFeed(page: Int!): GroupFeed!
    idols(input: IdolFilters!): [Idol!]!
    idolsFeed(page: Int!): IdolFeed!
    listings(input: ListingFilters!): [Listing!]!
    listingsFeed: [Listing!]!
    profile(input: ID!): UserProfile!
    talent(input: TalentFilters!): [Talent!]!
    talentFeed: [Talent!]!
    userSuggestions: [Listing!]!
    users(input: UserFilters!): [UserProfile!]!
    usersFeed(page: Int!): ProfileFeed!
}

"An external social media user profile"
type SocialProfile {
    type: SocialProfileType!
    username: String!
}

"""

A credit/debit card registered through Stripe

Upstream API(s):
sharetribeCU - /v1/api/current_user/show
"""
type StripePaymentMethod implements PaymentMethod {
    cardBrand: String!
    expirationMonth: String!
    expirationYear: String!
    isDefault: Boolean!
    lastFour: String!
    type: PaymentMethodType!
}

"A listing recommendation"
type Suggestion {
    listing: Listing!
    saved: Boolean!
    skipped: Boolean!
}

"A swipe action operated on a suggested listing by a user"
type Swipe {
    faved: Boolean!
    id: ID!
    listing: Listing!
    skipped: Boolean!
    viewed: Boolean!
}

"Represents an monetary transaction made for an accepted offer"
type Transaction {
    amountCharged: Amount!
    amountEarned: Amount!
    id: ID!
}

"""

A user account in the system

Upstream URL(s):
sharetribeCU - GET /v1/api/current_user/show
sharetribeOL - GET /v1/api/own_listings/query
sharetribeTR - GET /v1/api/transactions/query?only=sale
"""
type UserAccount {
    banned: Boolean!
    biasSuggestionsOnly: Boolean!
    biases: [Talent!]!
    connectedAccounts: [IdentityProvider!]!
    country: String!
    createdAt: String!
    createdListings: [Listing!]!
    deleted: Boolean!
    email: String!
    emailVerified: Boolean!
    firstName: String!
    generalNotifs: Boolean!
    id: ID!
    language: String!
    lastName: String!
    paymentMethods: [PaymentMethod!]!
    pendingEmail: String
    profile: UserProfile!
    savedListingNotifs: Boolean!
    savedListings: [Listing!]!
    savedProfileListingNotifs: Boolean!
    savedProfiles: [UserProfile!]!
    sentOffers: [Offer!]!
    suggestedListings: [Listing!]!
    swipes: [Swipe!]!
}

"""

A user profile in the system

Upstream URL(s):
sharetribe - /v1/api/users/show?id={uuid}
"""
type UserProfile {
    description: String!
    profilePicId: ID!
    socials: [SocialProfile!]!
    username: String!
}

"Used to classify photocard conditions"
enum CardCondition {
    DAMAGED
    GOOD
    GREAT
    NEW
    OKAY
}

"The supported external oauth identity provider types"
enum IdentityProviderType {
    APPLE
    GOOGLE
    INSTAGRAM
    TWITTER
}

"Used to classify listings"
enum ListingType {
    WTS
    WTT
}

"The supported statuses an offer can be in"
enum OfferStatus {
    ACCEPTED
    EDITED
    NEGOTIATED
    OPEN
    REJECTED
    RESCINDED
}

"The supported payment method types"
enum PaymentMethodType {
    PAYPAL
    STRIPE_CARD
}

"The supported external social media profile types"
enum SocialProfileType {
    CARRD
    INSTAGRAM
    TWITTER
}

enum fake__Locale {
    az
    cz
    de
    de_AT
    de_CH
    en
    en_AU
    en_BORK
    en_CA
    en_GB
    en_IE
    en_IND
    en_US
    en_au_ocker
    es
    es_MX
    fa
    fr
    fr_CA
    ge
    id_ID
    it
    ja
    ko
    nb_NO
    nep
    nl
    pl
    pt_BR
    ru
    sk
    sv
    tr
    uk
    vi
    zh_CN
    zh_TW
}

enum fake__Types {
    "An URL for an avatar"
    avatarUrl
    bankIdentifierCode
    bitcoinAddress
    city
    "Configure color with option: `baseColor`"
    colorHex
    colorName
    companyBS
    companyCatchPhrase
    companyName
    country
    countryCode
    county
    currencyCode
    currencyName
    currencySymbol
    """

    By default returns dates beetween 2000-01-01 and 2030-01-01.
    Configure date format with options `dateFormat` `dateFrom` `dateTo`.
    """
    date
    dbCollation
    dbColumn
    dbEngine
    dbType
    domainName
    "Configure email provider with option: `emailProvider`"
    email
    fileExtension
    filename
    financeAccountName
    financeTransactionType
    firstName
    fullName
    "Configure date format with option `dateFormat`"
    futureDate
    hackerAbbreviation
    hackerPhrase
    "An image url. Configure image with options: `imageCategory`, `imageWidth`, `imageHeight` and `randomizeImageUrl`"
    imageUrl
    internationalBankAccountNumber
    ipv4Address
    ipv6Address
    jobTitle
    lastName
    latitude
    locale
    longitude
    "Lorem Ipsum text. Configure size with option `loremSize`"
    lorem
    macAddress
    mimeType
    "Sum of money. Configure with options `minMoney`/`maxMoney` and 'decimalPlaces'."
    money
    number
    "Configure password with option `passwordLength`"
    password
    "Configure date format with option `dateFormat`"
    pastDate
    phoneNumber
    product
    productCategory
    productMaterial
    productName
    "Configure date format with option `dateFormat`"
    recentDate
    secondaryAddress
    semver
    state
    stateAbbr
    "Configure address with option `useFullAddress`"
    streetAddress
    streetName
    url
    userAgent
    uuid
    word
    words
    zipCode
}

enum fake__loremSize {
    paragraph
    paragraphs
    sentence
    sentences
    word
    words
}

scalar examples__JSON

"When adding a listing, all required fields must be specified"
input AddListingInput {
    condition: CardCondition!
    country: String!
    description: String
    groups: [ID!]
    idols: [ID!]!
    international: Boolean!
    listedBy: ID!
    release: String
    startingPrice: Float
    targetGroups: [ID!]
    targetIdols: [ID!]
    targetMinCondition: CardCondition
    targetMinStaringPrice: Float
    type: [ListingType!]!
}

"When adding a user, no optional fields can be added"
input AddUserInput {
    country: String!
    username: String!
}

input GroupFilterFields {
    favedBy: [ID!]
    idols: [ID!]
    inListings: [ID!]
    name: [String!]
    wantedByListings: [ID!]
}

"Available filters for the Group type"
input GroupFilters {
    fields: GroupFilterFields
    ids: [ID!]
}

input IdolFilterFields {
    groups: [ID!]
    inCollections: [ID!]
    inListings: [ID!]
    isSolo: Boolean
    stageName: [String!]
    wantedByListings: [ID!]
}

"Available filters for the Idol type"
input IdolFilters {
    fields: IdolFilterFields
    ids: [ID!]
}

input ListingFieldFilters {
    condition: CardCondition
    country: [String!]
    description: [String!]
    favedBy: [ID!]
    groups: [ID!]
    idols: [ID!]
    international: Boolean
    listedBy: [ID!]
    release: [String!]
    startingPrice: Float
    targetGroups: [ID!]
    targetIdols: [ID!]
    targetMinCondition: CardCondition
    type: ListingType
}

"Available filters for the Listing type"
input ListingFilters {
    fields: ListingFieldFilters
    ids: [ID!]
}

input SendMessageInput {
    authorId: ID!
    conversationId: ID!
    message: String!
}

input StartChatInput {
    fromId: ID!
    listingId: ID!
    toId: ID!
}

"Available filters for the Group type"
input TalentFilters {
    groupFields: GroupFilterFields
    idolFields: IdolFilterFields
    ids: [ID!]
}

input UniqueChatInput {
    id: ID!
}

"When updating a listing, only non-final fields can be updated"
input UpdateListingInput {
    condition: CardCondition
    country: String
    description: String
    favedBy: [ID!]
    groups: [ID!]
    id: ID!
    idols: [ID!]
    international: Boolean
    listedBy: ID
    release: String
    startingPrice: Float
    targetGroups: [ID!]
    targetIdols: [ID!]
    targetMinCondition: CardCondition
    targetMinStaringPrice: Float
    type: [ListingType!]
}

"When updating a user, other existing fields can be added"
input UpdateUserInput {
    collections: [ID!]
    country: String
    faveGroups: [ID!]
    faveIdols: [ID!]
    faveListings: [ID!]
    faveUsers: [ID!]
    id: ID!
    listings: [ID!]
    username: String
}

input UserFilterFields {
    collections: [ID!]
    country: String
    description: String
    faveGroups: [ID!]
    faveIdols: [ID!]
    faveListings: [ID!]
    faveUsers: [ID!]
    listings: [ID!]
    username: String
}

"Available filters for the User type"
input UserFilters {
    fields: UserFilterFields
    ids: [ID!]
}

input UserPreferencesInput {
    faveGroups: [ID!]
    faveIdols: [ID!]
    id: ID!
}

input fake__color {
    blue255: Int = 0
    green255: Int = 0
    red255: Int = 0
}

input fake__imageSize {
    height: Int!
    width: Int!
}

input fake__options {
    "Only for type `colorHex`. [Details here](https://stackoverflow.com/a/43235/4989887)"
    baseColor: fake__color = {red255: 0, green255: 0, blue255: 0}
    "Only for types `*Date`. Example value: `YYYY MM DD`. [Full Specification](http://momentjs.com/docs/#/displaying/format/)"
    dateFormat: String = "YYYY-MM-DDTHH:mm:ss[Z]"
    "Only for types `betweenDate`. Example value: `1986-11-02`."
    dateFrom: String = "2010-01-01"
    "Only for types `betweenDate`. Example value: `2038-01-19`."
    dateTo: String = "2030-01-01"
    "Only for type `money`"
    decimalPlaces: Int
    "Only for type `email`"
    emailProvider: String
    "Only for type `imageUrl`. Example value: `[\"nature\", \"water\"]`."
    imageKeywords: [String!]
    "Only for type `imageUrl`"
    imageSize: fake__imageSize
    "Only for type `lorem`"
    loremSize: fake__loremSize
    "Only for type `money`"
    maxMoney: Float
    "Only for type `number`"
    maxNumber: Float
    "Only for type `money`"
    minMoney: Float
    "Only for type `number`"
    minNumber: Float
    "Only for type `password`"
    passwordLength: Int
    "Only for type `number`"
    precisionNumber: Float
    "Only for type `imageUrl`"
    randomizeImageUrl: Boolean
    "Only for type `streetAddress`"
    useFullAddress: Boolean
}
